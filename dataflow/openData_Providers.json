{
	"name": "openData_Providers",
	"properties": {
		"folder": {
			"name": "openData"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cosmosDb_Ukrlp_Backup",
						"type": "DatasetReference"
					},
					"name": "Providers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "openData_Cache_Providers",
						"type": "DatasetReference"
					},
					"name": "Cache"
				}
			],
			"transformations": [
				{
					"name": "FilterActive"
				},
				{
					"name": "FlattenContacts"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "BackfillLegalContacts"
				},
				{
					"name": "MergeContacts"
				},
				{
					"name": "CreateContactAddress"
				},
				{
					"name": "Transform"
				},
				{
					"name": "SortedProviders"
				}
			],
			"script": "source(output(\n\t\tUnitedKingdomProviderReferenceNumber as string,\n\t\tProviderName as string,\n\t\tTradingName as string,\n\t\tProviderStatus as string,\n\t\tProviderType as integer,\n\t\tProviderContact as (ContactType as string, ContactAddress as (SAON as (Description as string), PAON as (Description as string), StreetDescription as string, UniqueStreetReferenceNumber as string, Locality as string, Items as string[], ItemsElementName as string[], PostTown as string, PostCode as string, UniquePropertyReferenceNumber as string), ContactPersonalDetails as (PersonNameTitle as string, PersonGivenName as string, PersonFamilyName as string, PersonNameSuffix as string, PersonRequestedName as string), ContactRole as string, ContactTelephone1 as string, ContactTelephone2 as string, ContactFax as string, ContactWebsiteAddress as string, ContactEmail as string, LastUpdated as string)[],\n\t\tProviderVerificationDate as string,\n\t\tProviderVerificationDateSpecified as boolean,\n\t\tExpiryDateSpecified as boolean,\n\t\tProviderAssociations as string,\n\t\tProviderAliases as (ProviderAlias as string, LastUpdated as string)[],\n\t\tVerificationDetails as (VerificationAuthority as string, VerificationID as string)[],\n\t\tid as string,\n\t\tDateUpdated as string,\n\t\tDateDownloaded as string,\n\t\tStatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 10,\n\tinferDriftedColumnTypes: true) ~> Providers\nProviders filter( in([1,3], ProviderType) \r\n    && (Status == 1 || ProviderStatus == \"Active\")\r\n    && !(isNull(ProviderContact[1]))) ~> FilterActive\nFilterActive foldDown(unroll(ProviderContact),\n\tmapColumn(\n\t\tProviderUkprn = UnitedKingdomProviderReferenceNumber,\n\t\tProviderName,\n\t\tTradingName,\n\t\tContactType = ProviderContact.ContactType,\n\t\tContactAddress = ProviderContact.ContactAddress,\n\t\tContactTelephone1 = ProviderContact.ContactTelephone1,\n\t\tContactTelephone2 = ProviderContact.ContactTelephone2,\n\t\tContactWebsiteAddress = ProviderContact.ContactWebsiteAddress,\n\t\tContactEmail = ProviderContact.ContactEmail\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenContacts\nFlattenContacts split(ContactType == \"P\",\n\tContactType == \"L\",\n\tdisjoint: false) ~> ConditionalSplit1@(PrimaryContact, LegalContact, OtherContact)\nConditionalSplit1@LegalContact, ConditionalSplit1@PrimaryContact exists(ConditionalSplit1@LegalContact@ProviderUkprn\r\n == ConditionalSplit1@PrimaryContact@ProviderUkprn,\n\tnegate:true,\n\tbroadcast: 'auto')~> BackfillLegalContacts\nConditionalSplit1@PrimaryContact, BackfillLegalContacts union(byName: true)~> MergeContacts\nMergeContacts derive(ContactAddress1 = concatWS(\r\n    \", \",\r\n    iif(!isNull(ContactAddress.SAON.Description) && ContactAddress.SAON.Description != \"null\", \r\n        ContactAddress.SAON.Description\r\n    ), \r\n    iif(!isNull(ContactAddress.PAON.Description) && ContactAddress.PAON.Description != \"null\", \r\n        ContactAddress.PAON.Description\r\n    ),\r\n    iif(!isNull(ContactAddress.StreetDescription) && ContactAddress.StreetDescription != \"null\", \r\n        ContactAddress.StreetDescription\r\n    )\r\n),\n\t\tContactAddress2 = ContactAddress.Locality,\n\t\tContactTown = iif(!isNull(ContactAddress.PostTown), ContactAddress.PostTown, ContactAddress.Items[1]),\n\t\tContactPostcode = ContactAddress.PostCode,\n\t\tContactPhone = iif(!isNull(ContactTelephone1), ContactTelephone1, ContactTelephone2)) ~> CreateContactAddress\nCreateContactAddress select(mapColumn(\n\t\tProviderUkprn,\n\t\tProviderName,\n\t\tTradingName,\n\t\tContactType,\n\t\tContactAddress1,\n\t\tContactAddress2,\n\t\tContactTown,\n\t\tContactPostcode,\n\t\tContactWebsite = ContactWebsiteAddress,\n\t\tContactEmail,\n\t\tContactPhone\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Transform\nTransform sort(asc(ProviderUkprn, true)) ~> SortedProviders\nSortedProviders sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['providers.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Cache"
		}
	}
}