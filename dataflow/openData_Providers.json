{
	"name": "openData_Providers",
	"properties": {
		"folder": {
			"name": "Open Data"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cosmosDb_Ukrlp_Backup",
						"type": "DatasetReference"
					},
					"name": "Providers"
				},
				{
					"dataset": {
						"referenceName": "cosmosDb_Courses_Backup",
						"type": "DatasetReference"
					},
					"name": "Courses"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "openData_Cache_Providers",
						"type": "DatasetReference"
					},
					"name": "Cache"
				}
			],
			"transformations": [
				{
					"name": "FilterActive"
				},
				{
					"name": "CreateContactAddress"
				},
				{
					"name": "Transform"
				},
				{
					"name": "SortedProviders"
				},
				{
					"name": "FlattenCourseRuns"
				},
				{
					"name": "HasLiveCourses"
				},
				{
					"name": "FilterPrimaryContact"
				},
				{
					"name": "FilterActiveCourseRuns"
				}
			],
			"script": "source(output(\n\t\tUnitedKingdomProviderReferenceNumber as string,\n\t\tProviderName as string,\n\t\tTradingName as string,\n\t\tProviderStatus as string,\n\t\tProviderType as integer,\n\t\tProviderContact as (ContactType as string, ContactAddress as (SAON as (Description as string), PAON as (Description as string), StreetDescription as string, UniqueStreetReferenceNumber as string, Locality as string, Items as string[], ItemsElementName as string[], PostTown as string, PostCode as string, UniquePropertyReferenceNumber as string), ContactPersonalDetails as (PersonNameTitle as string, PersonGivenName as string, PersonFamilyName as string, PersonNameSuffix as string, PersonRequestedName as string), ContactRole as string, ContactTelephone1 as string, ContactTelephone2 as string, ContactFax as string, ContactWebsiteAddress as string, ContactEmail as string, LastUpdated as string)[],\n\t\tProviderVerificationDate as string,\n\t\tProviderVerificationDateSpecified as boolean,\n\t\tExpiryDateSpecified as boolean,\n\t\tProviderAssociations as string,\n\t\tProviderAliases as (ProviderAlias as string, LastUpdated as string)[],\n\t\tVerificationDetails as (VerificationAuthority as string, VerificationID as string)[],\n\t\tid as string,\n\t\tDateUpdated as string,\n\t\tDateDownloaded as string,\n\t\tStatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> Providers\nsource(output(\n\t\tid as string,\n\t\tCourseId as string,\n\t\tQualificationCourseTitle as string,\n\t\tLearnAimRef as string,\n\t\tNotionalNVQLevelv2 as string,\n\t\tAwardOrgCode as string,\n\t\tQualificationType as string,\n\t\tProviderUKPRN as string,\n\t\tCourseDescription as string,\n\t\tEntryRequirements as string,\n\t\tWhatYoullLearn as string,\n\t\tHowYoullLearn as string,\n\t\tWhatYoullNeed as string,\n\t\tHowYoullBeAssessed as string,\n\t\tWhereNext as string,\n\t\tAdultEducationBudget as boolean,\n\t\tAdvancedLearnerLoan as boolean,\n\t\tCourseRuns as (id as string, CourseInstanceId as string, VenueId as string, CourseName as string, ProviderCourseID as string, DeliveryMode as integer, FlexibleStartDate as boolean, StartDate as date, CourseURL as string, Cost as integer, CostDescription as string, DurationUnit as integer, DurationValue as integer, StudyMode as integer, AttendancePattern as integer, National as boolean, Regions as string[], RecordStatus as integer, CreatedDate as date, CreatedBy as string, UpdatedDate as date, UpdatedBy as string, SubRegions as string, BulkUploadErrors as string)[],\n\t\tCourseStatus as string,\n\t\tCreatedDate as string,\n\t\tCreatedBy as string,\n\t\tUpdatedDate as string,\n\t\tIsValid as boolean,\n\t\tUpdatedBy as string,\n\t\tBulkUploadErrors as string[],\n\t\tLarlessReason as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> Courses\nProviders filter((ProviderType == 1 || ProviderType == 3)\n    && (Status == 1 || ProviderStatus == \"Active\")) ~> FilterActive\nFilterPrimaryContact derive(ContactAddress1 = concatWS(\n    \", \",\n    iif(!isNull(ProviderContact.ContactAddress.SAON.Description) && ProviderContact.ContactAddress.SAON.Description != \"null\", \n        ProviderContact.ContactAddress.SAON.Description\n    ), \n    iif(!isNull(ProviderContact.ContactAddress.PAON.Description) && ProviderContact.ContactAddress.PAON.Description != \"null\", \n        ProviderContact.ContactAddress.PAON.Description\n    ),\n    iif(!isNull(ProviderContact.ContactAddress.StreetDescription) && ProviderContact.ContactAddress.StreetDescription != \"null\", \n        ProviderContact.ContactAddress.StreetDescription\n    )\n),\n\t\tContactAddress2 = ProviderContact.ContactAddress.Locality,\n\t\tContactTown = iifNull(ProviderContact.ContactAddress.PostTown, ProviderContact.ContactAddress.Items[1]),\n\t\tContactPostcode = ProviderContact.ContactAddress.PostCode,\n\t\tContactPhone = iifNull(ProviderContact.ContactTelephone1, ProviderContact.ContactTelephone2)) ~> CreateContactAddress\nCreateContactAddress select(mapColumn(\n\t\tProviderUkprn = UnitedKingdomProviderReferenceNumber,\n\t\tProviderName,\n\t\tTradingName,\n\t\tProviderStatus,\n\t\tProviderType,\n\t\tContactType = ProviderContact.ContactType,\n\t\tContactAddress1,\n\t\tContactAddress2,\n\t\tContactTown,\n\t\tContactPostcode,\n\t\tContactPhone,\n\t\tContactEmail = ProviderContact.ContactEmail,\n\t\tContactWebsite = ProviderContact.ContactWebsiteAddress\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Transform\nTransform sort(asc(ProviderUkprn, false),\n\tpartitionBy('hash', 1)) ~> SortedProviders\nCourses foldDown(unroll(CourseRuns),\n\tmapColumn(\n\t\tProviderUKPRN,\n\t\tRecordStatus = CourseRuns.RecordStatus\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenCourseRuns\nFilterActive, FilterActiveCourseRuns exists(UnitedKingdomProviderReferenceNumber == ProviderUKPRN,\n\tnegate:false,\n\tbroadcast: 'auto')~> HasLiveCourses\nHasLiveCourses derive(ProviderContact = iifNull(\n    filter(ProviderContact, #item.ContactType == \"P\")[1], \n    filter(ProviderContact, #item.ContactType == \"L\")[1]\n)) ~> FilterPrimaryContact\nFlattenCourseRuns filter(RecordStatus == 1) ~> FilterActiveCourseRuns\nSortedProviders sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['providers.json'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Cache"
		}
	}
}