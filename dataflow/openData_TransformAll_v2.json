{
	"name": "openData_TransformAll_v2",
	"properties": {
		"folder": {
			"name": "Open Data"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cosmosDb_Courses_Backup",
						"type": "DatasetReference"
					},
					"name": "Courses"
				},
				{
					"dataset": {
						"referenceName": "cosmosDb_Venues_Backup",
						"type": "DatasetReference"
					},
					"name": "Venues"
				},
				{
					"dataset": {
						"referenceName": "cosmosDb_Ukrlp_Backup",
						"type": "DatasetReference"
					},
					"name": "Providers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "openData_Cache_Courses",
						"type": "DatasetReference"
					},
					"name": "CourseCache"
				},
				{
					"dataset": {
						"referenceName": "openData_Cache_CoursesWithVenues",
						"type": "DatasetReference"
					},
					"name": "CourseRunCache"
				},
				{
					"dataset": {
						"referenceName": "openData_Cache_Providers",
						"type": "DatasetReference"
					},
					"name": "ProviderCache"
				},
				{
					"dataset": {
						"referenceName": "openData_Cache_Venues",
						"type": "DatasetReference"
					},
					"name": "VenueCache"
				}
			],
			"transformations": [
				{
					"name": "ActiveVenues"
				},
				{
					"name": "TransformVenues"
				},
				{
					"name": "ActiveProviders"
				},
				{
					"name": "ProvidersWithCourseRuns"
				},
				{
					"name": "AttachProviderContact"
				},
				{
					"name": "AttachProviderAddress"
				},
				{
					"name": "TransformProviders"
				},
				{
					"name": "SortedProviders"
				},
				{
					"name": "FlattenCourseRuns"
				},
				{
					"name": "ActiveCourseRuns"
				},
				{
					"name": "Sanitise"
				},
				{
					"name": "JoinVenues"
				},
				{
					"name": "ActiveProviderCourses"
				},
				{
					"name": "SortedCourseRuns"
				},
				{
					"name": "DistinctProviderUkprnWithCourses"
				}
			],
			"script": "source(output(\n\t\tid as string,\n\t\tCourseId as string,\n\t\tQualificationCourseTitle as string,\n\t\tLearnAimRef as string,\n\t\tNotionalNVQLevelv2 as string,\n\t\tAwardOrgCode as string,\n\t\tQualificationType as string,\n\t\tProviderUKPRN as string,\n\t\tCourseDescription as string,\n\t\tEntryRequirements as string,\n\t\tWhatYoullLearn as string,\n\t\tHowYoullLearn as string,\n\t\tWhatYoullNeed as string,\n\t\tHowYoullBeAssessed as string,\n\t\tWhereNext as string,\n\t\tAdultEducationBudget as boolean,\n\t\tAdvancedLearnerLoan as boolean,\n\t\tCourseRuns as (id as string, CourseInstanceId as string, VenueId as string, CourseName as string, ProviderCourseID as string, DeliveryMode as integer, FlexibleStartDate as boolean, StartDate as date, CourseURL as string, Cost as double, CostDescription as string, DurationUnit as integer, DurationValue as integer, StudyMode as integer, AttendancePattern as integer, National as boolean, Regions as string[], RecordStatus as integer, CreatedDate as date, CreatedBy as string, UpdatedDate as date, UpdatedBy as string, SubRegions as string, BulkUploadErrors as string)[],\n\t\tCourseStatus as integer,\n\t\tCreatedDate as date,\n\t\tCreatedBy as string,\n\t\tUpdatedDate as date,\n\t\tIsValid as boolean,\n\t\tUpdatedBy as string,\n\t\tBulkUploadErrors as string[],\n\t\tLarlessReason as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmodifiedAfter: (addDays(currentUTC(), -1)),\n\tmodifiedBefore: (currentUTC()),\n\tdocumentForm: 'documentPerLine') ~> Courses\nsource(output(\n\t\tUKPRN as string,\n\t\tPROVIDER_ID as string,\n\t\tVENUE_ID as string,\n\t\tVENUE_NAME as string,\n\t\tPROV_VENUE_ID as string,\n\t\tADDRESS_1 as string,\n\t\tADDRESS_2 as string,\n\t\tTOWN as string,\n\t\tCOUNTY as string,\n\t\tPOSTCODE as string,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tStatus as integer,\n\t\tDateUpdated as string,\n\t\tUpdatedBy as string,\n\t\tLocationId as string,\n\t\tTribalLocationId as string,\n\t\tTelephone as string,\n\t\tEmail as string,\n\t\tWebsite as string,\n\t\tid as string,\n\t\tCreatedBy as string,\n\t\tCreatedDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmodifiedAfter: (addDays(currentUTC(), -1)),\n\tmodifiedBefore: (currentUTC()),\n\tdocumentForm: 'documentPerLine') ~> Venues\nsource(output(\n\t\tUnitedKingdomProviderReferenceNumber as string,\n\t\tProviderName as string,\n\t\tTradingName as string,\n\t\tAlias as string,\n\t\tProviderStatus as string,\n\t\tProviderType as integer,\n\t\tProviderContact as (ContactType as string, ContactAddress as (SAON as (Description as string), PAON as (Description as string), StreetDescription as string, UniqueStreetReferenceNumber as string, Locality as string, Items as string[], ItemsElementName as string[], PostTown as string, PostCode as string, UniquePropertyReferenceNumber as string), ContactPersonalDetails as (PersonNameTitle as string, PersonGivenName as string, PersonFamilyName as string, PersonNameSuffix as string, PersonRequestedName as string), ContactRole as string, ContactTelephone1 as string, ContactTelephone2 as string, ContactFax as string, ContactWebsiteAddress as string, ContactEmail as string, LastUpdated as date)[],\n\t\tProviderVerificationDate as string,\n\t\tProviderVerificationDateSpecified as boolean,\n\t\tExpiryDateSpecified as boolean,\n\t\tProviderAssociations as string,\n\t\tProviderAliases as (ProviderAlias as string, LastUpdated as string)[],\n\t\tVerificationDetails as (VerificationAuthority as string, VerificationID as string)[],\n\t\tid as string,\n\t\tDateUpdated as date,\n\t\tDateDownloaded as string,\n\t\tStatus as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmodifiedAfter: (addDays(currentUTC(), -1)),\n\tmodifiedBefore: (currentUTC()),\n\tdocumentForm: 'documentPerLine') ~> Providers\nVenues filter(Status == 1) ~> ActiveVenues\nActiveVenues select(mapColumn(\n\t\tProviderUkprn = UKPRN,\n\t\tVenueId = id,\n\t\tVenueName = VENUE_NAME,\n\t\tAddress1 = ADDRESS_1,\n\t\tAddress2 = ADDRESS_2,\n\t\tTown = TOWN,\n\t\tCounty = COUNTY,\n\t\tPostcode = POSTCODE,\n\t\tLatitude,\n\t\tLongitude,\n\t\tTelephone,\n\t\tEmail,\n\t\tWebsite\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TransformVenues\nProviders filter((ProviderType == 1 || ProviderType == 3)\n    && (Status == 1 || ProviderStatus == \"Active\")\n    && not(isNull(ProviderContact[1]))) ~> ActiveProviders\nActiveProviders, DistinctProviderUkprnWithCourses exists(UnitedKingdomProviderReferenceNumber == ProviderUKPRN,\n\tnegate:false,\n\tbroadcast: 'auto')~> ProvidersWithCourseRuns\nProvidersWithCourseRuns derive(ProviderContact = iifNull(\n    filter(ProviderContact, #item.ContactType == \"P\")[1], \n    filter(ProviderContact, #item.ContactType == \"L\")[1]\n)) ~> AttachProviderContact\nAttachProviderContact derive(ContactAddress1 = concatWS(\n    \", \",\n    iif(!isNull(ProviderContact.ContactAddress.SAON.Description) && ProviderContact.ContactAddress.SAON.Description != \"null\", \n        ProviderContact.ContactAddress.SAON.Description\n    ), \n    iif(!isNull(ProviderContact.ContactAddress.PAON.Description) && ProviderContact.ContactAddress.PAON.Description != \"null\", \n        ProviderContact.ContactAddress.PAON.Description\n    ),\n    iif(!isNull(ProviderContact.ContactAddress.StreetDescription) && ProviderContact.ContactAddress.StreetDescription != \"null\", \n        ProviderContact.ContactAddress.StreetDescription\n    )\n),\n\t\tContactAddress2 = ProviderContact.ContactAddress.Locality,\n\t\tContactTown = iifNull(ProviderContact.ContactAddress.PostTown, ProviderContact.ContactAddress.Items[1]),\n\t\tContactPostcode = ProviderContact.ContactAddress.PostCode,\n\t\tContactPhone = iifNull(ProviderContact.ContactTelephone1, ProviderContact.ContactTelephone2)) ~> AttachProviderAddress\nAttachProviderAddress select(mapColumn(\n\t\tProviderUkprn = UnitedKingdomProviderReferenceNumber,\n\t\tProviderName,\n\t\tTradingName,\n\t\tAlias,\n\t\tProviderStatus,\n\t\tProviderType,\n\t\tContactType = ProviderContact.ContactType,\n\t\tContactAddress1,\n\t\tContactAddress2,\n\t\tContactTown,\n\t\tContactPostcode,\n\t\tContactPhone,\n\t\tContactEmail = ProviderContact.ContactEmail,\n\t\tContactWebsite = ProviderContact.ContactWebsiteAddress\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> TransformProviders\nTransformProviders sort(asc(ProviderUkprn, false),\n\tpartitionBy('hash', 1)) ~> SortedProviders\nActiveProviderCourses foldDown(unroll(CourseRuns),\n\tmapColumn(\n\t\tProviderUKPRN,\n\t\tCourseId = id,\n\t\tCourseRunId = CourseRuns.id,\n\t\tLearnAimRef,\n\t\tCourseDescription,\n\t\tCourseName = CourseRuns.CourseName,\n\t\tDeliveryMode = CourseRuns.DeliveryMode,\n\t\tFlexibleStartDate = CourseRuns.FlexibleStartDate,\n\t\tStartDate = CourseRuns.StartDate,\n\t\tCourseURL = CourseRuns.CourseURL,\n\t\tCost = CourseRuns.Cost,\n\t\tCostDescription = CourseRuns.CostDescription,\n\t\tNational = CourseRuns.National,\n\t\tRegions = CourseRuns.Regions,\n\t\tVenueId = CourseRuns.VenueId,\n\t\tUpdatedDate = CourseRuns.UpdatedDate,\n\t\tDurationUnit = CourseRuns.DurationUnit,\n\t\tDurationValue = CourseRuns.DurationValue,\n\t\tAttendancePattern = CourseRuns.AttendancePattern,\n\t\tRecordStatus = CourseRuns.RecordStatus,\n\t\tStudyMode = CourseRuns.StudyMode,\n\t\tEntryRequirements,\n\t\tHowYoullBeAssessed\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenCourseRuns\nFlattenCourseRuns filter(RecordStatus == 1 && (FlexibleStartDate == true() || StartDate >= subMonths(subDays(currentDate(), dayOfMonth(currentDate()) - 1), 1))) ~> ActiveCourseRuns\nSortedCourseRuns derive(CourseName = regexReplace(CourseName, '(\\\\\")', ''),\n\t\tCourseDescription = regexReplace(CourseDescription, '(\\\\\")', ''),\n\t\tCostDescription = regexReplace(CostDescription, '(\\\\\")', ''),\n\t\tRegionsString = regexReplace(toString(Regions), '(\\\\\")', ''),\n\t\tEntryRequirements = regexReplace(EntryRequirements, '(\\\\\")', ''),\n\t\tHowYoullBeAssessed = regexReplace(HowYoullBeAssessed, '(\\\\\")', '')) ~> Sanitise\nSanitise, ActiveVenues join(VenueId == id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinVenues\nCourses, ActiveProviders exists(ProviderUKPRN == UnitedKingdomProviderReferenceNumber,\n\tnegate:false,\n\tbroadcast: 'auto')~> ActiveProviderCourses\nActiveCourseRuns sort(asc(ProviderUKPRN, true),\n\tasc(CourseName, true)) ~> SortedCourseRuns\nSortedCourseRuns select(mapColumn(\n\t\tProviderUKPRN\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DistinctProviderUkprnWithCourses\nSanitise sink(input(\n\t\tProviderUKPRN as string,\n\t\tCourseId as string,\n\t\tLearnAimRef as string,\n\t\tCourseName as string,\n\t\tCourseDescription as string,\n\t\tCourseURL as string,\n\t\tCost as double,\n\t\tCostDescription as string,\n\t\tFlexibleStartDate as boolean,\n\t\tStartDate as string,\n\t\tDurationUnit as string,\n\t\tDurationValue as string,\n\t\tDeliveryMode as string,\n\t\tAttendancePattern as string,\n\t\tNational as boolean,\n\t\tRegions as string[],\n\t\tRegionsString as string,\n\t\tVenueId as string,\n\t\tUpdatedDate as string,\n\t\tRecordStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tmapColumn(\n\t\tProviderUKPRN,\n\t\tCourseId,\n\t\tLearnAimRef,\n\t\tCourseDescription,\n\t\tCourseName,\n\t\tDeliveryMode,\n\t\tFlexibleStartDate,\n\t\tStartDate,\n\t\tCourseURL,\n\t\tCost,\n\t\tCostDescription,\n\t\tNational,\n\t\tRegions,\n\t\tRegionsString,\n\t\tVenueId,\n\t\tDurationUnit,\n\t\tDurationValue,\n\t\tAttendancePattern,\n\t\tUpdatedDate,\n\t\tRecordStatus,\n\t\tCourseRunId,\n\t\tStudyMode,\n\t\tEntryRequirements,\n\t\tHowYoullBeAssessed\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CourseCache\nJoinVenues sink(input(\n\t\tProviderUKPRN as string,\n\t\tCourseId as string,\n\t\tCourseRunId as string,\n\t\tLearnAimRef as string,\n\t\tCourseName as string,\n\t\tCourseDescription as string,\n\t\tCourseURL as string,\n\t\tCost as double,\n\t\tCostDescription as string,\n\t\tFlexibleStartDate as boolean,\n\t\tStartDate as string,\n\t\tDurationUnit as string,\n\t\tDurationValue as string,\n\t\tDeliveryMode as string,\n\t\tAttendancePattern as string,\n\t\tNational as boolean,\n\t\tRegions as string[],\n\t\tRegionsString as string,\n\t\tVenueName as string,\n\t\tAddress1 as string,\n\t\tAddress2 as string,\n\t\tCounty as string,\n\t\tEmail as string,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tPostcode as string,\n\t\tTelephone as string,\n\t\tTown as string,\n\t\tWebsite as string,\n\t\tUpdatedDate as string,\n\t\tRecordStatus as string,\n\t\tStudyMode as string,\n\t\tEntryRequirements as string,\n\t\tHowYoullBeAssessed as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tmapColumn(\n\t\tProviderUKPRN,\n\t\tCourseId,\n\t\tCourseRunId,\n\t\tLearnAimRef,\n\t\tCourseDescription,\n\t\tCourseName,\n\t\tDeliveryMode,\n\t\tFlexibleStartDate,\n\t\tStartDate,\n\t\tCourseURL,\n\t\tCost,\n\t\tCostDescription,\n\t\tNational,\n\t\tRegions,\n\t\tDurationUnit,\n\t\tDurationValue,\n\t\tAttendancePattern,\n\t\tRegionsString,\n\t\tVenueName = VENUE_NAME,\n\t\tAddress1 = ADDRESS_1,\n\t\tAddress2 = ADDRESS_2,\n\t\tCounty = COUNTY,\n\t\tPostcode = POSTCODE,\n\t\tTown = TOWN,\n\t\tLatitude,\n\t\tLongitude,\n\t\tEmail,\n\t\tTelephone,\n\t\tWebsite,\n\t\tUpdatedDate,\n\t\tRecordStatus,\n\t\tStudyMode,\n\t\tEntryRequirements,\n\t\tHowYoullBeAssessed\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> CourseRunCache\nSortedProviders sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProviderCache\nTransformVenues sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\ttruncate: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> VenueCache"
		}
	}
}