{
	"name": "openData_Transform_Courses",
	"properties": {
		"folder": {
			"name": "openDataExport"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "cosmosDb_Courses",
						"type": "DatasetReference"
					},
					"name": "courses"
				},
				{
					"dataset": {
						"referenceName": "cosmosDb_Venues",
						"type": "DatasetReference"
					},
					"name": "venues"
				},
				{
					"dataset": {
						"referenceName": "openData_Cache_Regions",
						"type": "DatasetReference"
					},
					"name": "regions"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "openData_Export_Courses",
						"type": "DatasetReference"
					},
					"name": "coursesExport"
				}
			],
			"transformations": [
				{
					"name": "flattenCourseRuns"
				},
				{
					"name": "sortByStartDate"
				},
				{
					"name": "filterRecentCourses"
				},
				{
					"name": "filterValidAndActiveCourses"
				},
				{
					"name": "splitByStartDate"
				},
				{
					"name": "joinWithFlexibleCourses"
				},
				{
					"name": "splitByLocationType"
				},
				{
					"name": "joinVenue"
				},
				{
					"name": "joinCourses"
				}
			],
			"script": "source(output(\n\t\tCourseId as string,\n\t\tQualificationCourseTitle as string,\n\t\tLearnAimRef as string,\n\t\tNotionalNVQLevelv2 as string,\n\t\tAwardOrgCode as string,\n\t\tQualificationType as string,\n\t\tProviderUKPRN as string,\n\t\tCourseDescription as string,\n\t\tEntryRequirements as string,\n\t\tWhatYoullLearn as string,\n\t\tHowYoullLearn as string,\n\t\tWhatYoullNeed as string,\n\t\tHowYoullBeAssessed as string,\n\t\tWhereNext as string,\n\t\tAdultEducationBudget as boolean,\n\t\tAdvancedLearnerLoan as boolean,\n\t\tCourseRuns as (id as string, CourseInstanceId as string, VenueId as string, CourseName as string, ProviderCourseID as string, DeliveryMode as integer, FlexibleStartDate as boolean, StartDate as string, CourseURL as string, Cost as integer, CostDescription as string, DurationUnit as integer, DurationValue as integer, StudyMode as integer, AttendancePattern as integer, National as boolean, Regions as string[], RecordStatus as integer, CreatedDate as string, CreatedBy as string, UpdatedDate as string, UpdatedBy as string, SubRegions as string, BulkUploadErrors as string)[],\n\t\tCourseStatus as integer,\n\t\tCreatedDate as string,\n\t\tCreatedBy as string,\n\t\tUpdatedDate as string,\n\t\tIsValid as boolean,\n\t\tUpdatedBy as string,\n\t\tBulkUploadErrors as string[],\n\t\tLarlessReason as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tformat: 'document') ~> courses\nsource(output(\n\t\tId as string,\n\t\tLocationAddress1 as string,\n\t\tLocationAddress2 as string,\n\t\tLocationCounty as string,\n\t\tLocationLatitude as double,\n\t\tLocationLongitude as double,\n\t\tLocationName as string,\n\t\tLocationPostcode as string,\n\t\tLocationTown as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tquery: 'SELECT  c.id as Id\\n       ,c.VENUE_NAME as LocationName\\n       ,c.ADDRESS_1 as LocationAddress1\\n       ,c.ADDRESS_2 as LocationAddress2\\n       ,c.TOWN as LocationTown\\n       ,c.COUNTY as LocationCounty\\n       ,c.POSTCODE as LocationPostcode\\n       ,c.Latitude as LocationLatitude\\n       ,c.Longitude as LocationLongitude                                                 \\nFROM c',\n\tformat: 'documentQuery',\n\tsystemColumns: false) ~> venues\nsource(output(\n\t\tId as string,\n\t\tApiLocationId as string,\n\t\tSubRegionName as string,\n\t\tChecked as boolean,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tWeighting as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> regions\nfilterValidAndActiveCourses foldDown(unroll(CourseRuns),\n\tmapColumn(\n\t\tProviderUkprn = ProviderUKPRN,\n\t\tCourseName = CourseRuns.CourseName,\n\t\tCourseId,\n\t\tLearnAimRef,\n\t\tDeliveryMode = CourseRuns.DeliveryMode,\n\t\tFlexibleStartDate = CourseRuns.FlexibleStartDate,\n\t\tStartDate = CourseRuns.StartDate,\n\t\tCourseURL = CourseRuns.CourseURL,\n\t\tCost = CourseRuns.Cost,\n\t\tCostDescription = CourseRuns.CostDescription,\n\t\tNational = CourseRuns.National,\n\t\tRegions = CourseRuns.Regions,\n\t\tVenueId = CourseRuns.VenueId,\n\t\tUpdatedDate = CourseRuns.UpdatedDate,\n\t\tDurationUnit = CourseRuns.DurationUnit,\n\t\tDurationValue = CourseRuns.DurationValue,\n\t\tAttendanceType = CourseRuns.AttendancePattern\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> flattenCourseRuns\nflattenCourseRuns sort(asc(StartDate, false),\n\tasc(FlexibleStartDate, false)) ~> sortByStartDate\nsplitByStartDate@hasStartDate filter(toDate(StartDate) > subDays(toDate(StartDate), 1 + dayOfMonth(toDate(StartDate)))) ~> filterRecentCourses\ncourses filter(and(CourseStatus == 1, IsValid)) ~> filterValidAndActiveCourses\nsortByStartDate split(!isNull(StartDate),\n\tFlexibleStartDate,\n\tdisjoint: false) ~> splitByStartDate@(hasStartDate, isFlexible, unknown)\nfilterRecentCourses, splitByStartDate@isFlexible union(byName: true)~> joinWithFlexibleCourses\njoinWithFlexibleCourses split(not(isNull(VenueId)),\n\tnot(isNull(Regions)),\n\tNational,\n\tdisjoint: false) ~> splitByLocationType@(hasVenue, isRegional, isNational, unknown)\nsplitByLocationType@hasVenue, venues join(VenueId == Id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> joinVenue\njoinVenue, splitByLocationType@isRegional, splitByLocationType@isNational union(byName: true)~> joinCourses\njoinCourses sink(input(\n\t\tProviderUkprn as string,\n\t\tCourseName as string,\n\t\tCourseId as string,\n\t\tLearnAimRef as string,\n\t\tDeliveryMode as string,\n\t\tStartDate as string,\n\t\tFlexibleStartDate as string,\n\t\tCourseURL as string,\n\t\tCost as string,\n\t\tCostDescription as string,\n\t\tRegions as string,\n\t\tNational as string,\n\t\tLocationName as string,\n\t\tLocationAddress1 as string,\n\t\tLocationAddress2 as string,\n\t\tLocationTown as string,\n\t\tLocationPostcode as string,\n\t\tLocationLatitude as string,\n\t\tLocationLongitude as string,\n\t\tUpdatedDate as string,\n\t\tDurationUnit as string,\n\t\tDurationValue as string,\n\t\tAttendanceType as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['courses.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> coursesExport"
		}
	}
}